<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:avatar="http://www.dianping.com/schema/avatar" xmlns:pigeon="http://code.dianping.com/schema/pigeon"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.dianping.com/schema/avatar http://www.dianping.com/schema/avatar/avatar-1.0.xsd
     http://code.dianping.com/schema/pigeon http://code.dianping.com/schema/pigeon/pigeon-service-2.0.xsd
     http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">

	<bean name="placeholder" lazy-init="false"
		class="com.dianping.lion.client.InitializeConfig">
		<property name="propertiesPath" value="config/applicationContext.properties" />
	</bean>
	
	<bean name="configHolder" class="com.dianping.pigeon.governor.lion.ConfigHolder" init-method="init" />

	<task:annotation-driven />

	<bean id="tomcatDataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
		<property name="poolProperties">
			<bean class="org.apache.tomcat.jdbc.pool.PoolProperties">
				<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
				<property name="url" value="${pigeon-governor-server.jdbc.url}"/>
				<property name="username" value="${pigeon-governor-server.jdbc.username}"/>
				<property name="password" value="${pigeon-governor-server.jdbc.password}"/>
				<property name="jmxEnabled" value="true"/>
				<property name="testWhileIdle" value="true"/>
				<property name="testOnBorrow" value="true"/>
				<property name="testOnReturn" value="false"/>
				<property name="validationInterval" value="30000"/>
				<property name="validationQuery" value="SELECT 1"/>
				<property name="timeBetweenEvictionRunsMillis" value="30000"/>
				<property name="maxActive" value="100"/>
				<property name="initialSize" value="10"/>
				<property name="maxWait" value="10000"/>
				<property name="minEvictableIdleTimeMillis" value="30000"/>
				<property name="minIdle" value="10"/>
				<property name="logAbandoned" value="false"/>
				<property name="removeAbandoned" value="true"/>
				<property name="removeAbandonedTimeout" value="60"/>
				<property name="jdbcInterceptors" value="org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer"/>
			</bean>
		</property>
	</bean>

	<!-- MyBatis Mappers -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.dianping.pigeon.governor.dao,com.dianping.pigeon.governor.message.depenedencies.dao" />
	</bean>

    <!-- SessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="tomcatDataSource" />
		<property name="mapperLocations" value="classpath:com/dianping/pigeon/governor/dao/*.xml" />
	</bean>

	<!-- Transaction -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="tomcatDataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- enable autowire -->
	<context:annotation-config />

	<pigeon:annotation />
	<pigeon:reference id="masterDataEmployeeService"  timeout="5000"
					  url="http://service.dianping.com/ba/hris/masterdata/EmployeeService_1.0.0"
					  interface="com.dianping.ba.hris.md.api.service.EmployeeService" />

	<!-- enable component scanning (beware that this does not enable mapper 
		scanning!) -->
	<context:component-scan base-package="com.dianping.pigeon.governor.service,com.dianping.pigeon.governor.message,com.dianping.pigeon.governor.monitor" />

	<!--TODO need to re-construct configure-->

	<bean id="serviceNodeHeartBeatCheckTask"
		  class="com.dianping.pigeon.governor.task.ServiceNodeHeartBeatCheckTask"
		  init-method="init" />

	<task:scheduled-tasks>
		<task:scheduled ref="checkAndSyncServiceNodeDB" method="schedule" cron="0 30 2 * * ? "/>
	</task:scheduled-tasks>
	<bean id="checkAndSyncServiceNodeDB"
		  class="com.dianping.pigeon.governor.task.CheckAndSyncServiceNodeDB" />

	<task:scheduled-tasks>
		<task:scheduled ref="scanServiceTask" method="schedule" cron=" 0 0 3 * * *"/>
	</task:scheduled-tasks>
	<bean id="scanServiceTask"
		  class="com.dianping.pigeon.governor.bean.scanServiceDesc.ScanServiceTask"/>
	<task:scheduled-tasks>
		<task:scheduled ref="purgeExpireDescTask" method="schedule" cron="0 0 4 * * *"/>
	</task:scheduled-tasks>
	<bean id = "purgeExpireDescTask" class="com.dianping.pigeon.governor.bean.scanServiceDesc.PurgeExpireDescTask" />
	<bean id ="flowMonitorTask" class="com.dianping.pigeon.governor.monitor.load.FlowMonitorTask"/>
	<task:scheduled-tasks>
		<task:scheduled ref="flowMonitorTask" method="schedule" cron="0 20 * * * *"/>
	</task:scheduled-tasks>
	<bean id="orgUpdateTask" class="com.dianping.pigeon.governor.task.organization.OrgUpdateTask"/>
	<task:scheduled-tasks>
		<task:scheduled ref="orgUpdateTask" method="schedule" cron="0 0 2 * * *"/>
	</task:scheduled-tasks>
	<!--<task:scheduled-tasks>-->
		<!--<task:scheduled ref="flowMonitorTask" method="start" cron=""/>-->
	<!--</task:scheduled-tasks>-->

	<!-- core bean -->
	<bean id="taskExecutor"  class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name ="corePoolSize" value ="800" />
		<property name ="maxPoolSize" value ="1200" />
		<property name ="keepAliveSeconds" value ="300" />
		<!--<property name ="queueCapacity" value ="10000" />-->
		<property name= "rejectedExecutionHandler" >
			<!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
			<!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
			<!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<bean class = "java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
		<property name="WaitForTasksToCompleteOnShutdown" value="true" />
		<!--<property name="awaitTerminationSeconds" value="0x7fffffff" />-->
	</bean>

</beans>
