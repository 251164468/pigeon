/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dianping.pigeon.remoting.common.domain.generic.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-05-26")
public class Header implements org.apache.thrift.TBase<Header, Header._Fields>, java.io.Serializable, Cloneable, Comparable<Header> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Header");

  private static final org.apache.thrift.protocol.TField MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMPRESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("compressType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("requestInfo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField RESPONSE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("responseInfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField TRACE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("traceInfo", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField GLOBAL_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("globalContext", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField LOCAL_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("localContext", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField NEED_CHECKSUM_FIELD_DESC = new org.apache.thrift.protocol.TField("needChecksum", org.apache.thrift.protocol.TType.BOOL, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HeaderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HeaderTupleSchemeFactory());
  }

  /**
   * 
   * @see MessageType
   */
  public MessageType messageType; // optional
  /**
   * 
   * @see CompressType
   */
  public CompressType compressType; // optional
  public RequestInfo requestInfo; // optional
  public ResponseInfo responseInfo; // optional
  public TraceInfo traceInfo; // optional
  public Map<String,String> globalContext; // optional
  public Map<String,String> localContext; // optional
  public boolean needChecksum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see MessageType
     */
    MESSAGE_TYPE((short)1, "messageType"),
    /**
     * 
     * @see CompressType
     */
    COMPRESS_TYPE((short)2, "compressType"),
    REQUEST_INFO((short)3, "requestInfo"),
    RESPONSE_INFO((short)4, "responseInfo"),
    TRACE_INFO((short)5, "traceInfo"),
    GLOBAL_CONTEXT((short)6, "globalContext"),
    LOCAL_CONTEXT((short)7, "localContext"),
    NEED_CHECKSUM((short)8, "needChecksum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MESSAGE_TYPE
          return MESSAGE_TYPE;
        case 2: // COMPRESS_TYPE
          return COMPRESS_TYPE;
        case 3: // REQUEST_INFO
          return REQUEST_INFO;
        case 4: // RESPONSE_INFO
          return RESPONSE_INFO;
        case 5: // TRACE_INFO
          return TRACE_INFO;
        case 6: // GLOBAL_CONTEXT
          return GLOBAL_CONTEXT;
        case 7: // LOCAL_CONTEXT
          return LOCAL_CONTEXT;
        case 8: // NEED_CHECKSUM
          return NEED_CHECKSUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NEEDCHECKSUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MESSAGE_TYPE,_Fields.COMPRESS_TYPE,_Fields.REQUEST_INFO,_Fields.RESPONSE_INFO,_Fields.TRACE_INFO,_Fields.GLOBAL_CONTEXT,_Fields.LOCAL_CONTEXT,_Fields.NEED_CHECKSUM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("messageType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
    tmpMap.put(_Fields.COMPRESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("compressType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CompressType.class)));
    tmpMap.put(_Fields.REQUEST_INFO, new org.apache.thrift.meta_data.FieldMetaData("requestInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestInfo.class)));
    tmpMap.put(_Fields.RESPONSE_INFO, new org.apache.thrift.meta_data.FieldMetaData("responseInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResponseInfo.class)));
    tmpMap.put(_Fields.TRACE_INFO, new org.apache.thrift.meta_data.FieldMetaData("traceInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TraceInfo.class)));
    tmpMap.put(_Fields.GLOBAL_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("globalContext", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP        , "Context")));
    tmpMap.put(_Fields.LOCAL_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("localContext", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP        , "Context")));
    tmpMap.put(_Fields.NEED_CHECKSUM, new org.apache.thrift.meta_data.FieldMetaData("needChecksum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Header.class, metaDataMap);
  }

  public Header() {
    this.messageType = com.dianping.pigeon.remoting.common.domain.generic.thrift.MessageType.Normal;

    this.compressType = CompressType.None;

    this.needChecksum = false;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Header(Header other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMessageType()) {
      this.messageType = other.messageType;
    }
    if (other.isSetCompressType()) {
      this.compressType = other.compressType;
    }
    if (other.isSetRequestInfo()) {
      this.requestInfo = new RequestInfo(other.requestInfo);
    }
    if (other.isSetResponseInfo()) {
      this.responseInfo = new ResponseInfo(other.responseInfo);
    }
    if (other.isSetTraceInfo()) {
      this.traceInfo = new TraceInfo(other.traceInfo);
    }
    if (other.isSetGlobalContext()) {
      this.globalContext = other.globalContext;
    }
    if (other.isSetLocalContext()) {
      this.localContext = other.localContext;
    }
    this.needChecksum = other.needChecksum;
  }

  public Header deepCopy() {
    return new Header(this);
  }

  @Override
  public void clear() {
    this.messageType = com.dianping.pigeon.remoting.common.domain.generic.thrift.MessageType.Normal;

    this.compressType = CompressType.None;

    this.requestInfo = null;
    this.responseInfo = null;
    this.traceInfo = null;
    this.globalContext = null;
    this.localContext = null;
    this.needChecksum = false;

  }

  /**
   * 
   * @see MessageType
   */
  public MessageType getMessageType() {
    return this.messageType;
  }

  /**
   * 
   * @see MessageType
   */
  public Header setMessageType(MessageType messageType) {
    this.messageType = messageType;
    return this;
  }

  public void unsetMessageType() {
    this.messageType = null;
  }

  /** Returns true if field messageType is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageType() {
    return this.messageType != null;
  }

  public void setMessageTypeIsSet(boolean value) {
    if (!value) {
      this.messageType = null;
    }
  }

  /**
   * 
   * @see CompressType
   */
  public CompressType getCompressType() {
    return this.compressType;
  }

  /**
   * 
   * @see CompressType
   */
  public Header setCompressType(CompressType compressType) {
    this.compressType = compressType;
    return this;
  }

  public void unsetCompressType() {
    this.compressType = null;
  }

  /** Returns true if field compressType is set (has been assigned a value) and false otherwise */
  public boolean isSetCompressType() {
    return this.compressType != null;
  }

  public void setCompressTypeIsSet(boolean value) {
    if (!value) {
      this.compressType = null;
    }
  }

  public RequestInfo getRequestInfo() {
    return this.requestInfo;
  }

  public Header setRequestInfo(RequestInfo requestInfo) {
    this.requestInfo = requestInfo;
    return this;
  }

  public void unsetRequestInfo() {
    this.requestInfo = null;
  }

  /** Returns true if field requestInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestInfo() {
    return this.requestInfo != null;
  }

  public void setRequestInfoIsSet(boolean value) {
    if (!value) {
      this.requestInfo = null;
    }
  }

  public ResponseInfo getResponseInfo() {
    return this.responseInfo;
  }

  public Header setResponseInfo(ResponseInfo responseInfo) {
    this.responseInfo = responseInfo;
    return this;
  }

  public void unsetResponseInfo() {
    this.responseInfo = null;
  }

  /** Returns true if field responseInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseInfo() {
    return this.responseInfo != null;
  }

  public void setResponseInfoIsSet(boolean value) {
    if (!value) {
      this.responseInfo = null;
    }
  }

  public TraceInfo getTraceInfo() {
    return this.traceInfo;
  }

  public Header setTraceInfo(TraceInfo traceInfo) {
    this.traceInfo = traceInfo;
    return this;
  }

  public void unsetTraceInfo() {
    this.traceInfo = null;
  }

  /** Returns true if field traceInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceInfo() {
    return this.traceInfo != null;
  }

  public void setTraceInfoIsSet(boolean value) {
    if (!value) {
      this.traceInfo = null;
    }
  }

  public int getGlobalContextSize() {
    return (this.globalContext == null) ? 0 : this.globalContext.size();
  }

  public void putToGlobalContext(String key, String val) {
    if (this.globalContext == null) {
      this.globalContext = new HashMap<String,String>();
    }
    this.globalContext.put(key, val);
  }

  public Map<String,String> getGlobalContext() {
    return this.globalContext;
  }

  public Header setGlobalContext(Map<String,String> globalContext) {
    this.globalContext = globalContext;
    return this;
  }

  public void unsetGlobalContext() {
    this.globalContext = null;
  }

  /** Returns true if field globalContext is set (has been assigned a value) and false otherwise */
  public boolean isSetGlobalContext() {
    return this.globalContext != null;
  }

  public void setGlobalContextIsSet(boolean value) {
    if (!value) {
      this.globalContext = null;
    }
  }

  public int getLocalContextSize() {
    return (this.localContext == null) ? 0 : this.localContext.size();
  }

  public void putToLocalContext(String key, String val) {
    if (this.localContext == null) {
      this.localContext = new HashMap<String,String>();
    }
    this.localContext.put(key, val);
  }

  public Map<String,String> getLocalContext() {
    return this.localContext;
  }

  public Header setLocalContext(Map<String,String> localContext) {
    this.localContext = localContext;
    return this;
  }

  public void unsetLocalContext() {
    this.localContext = null;
  }

  /** Returns true if field localContext is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalContext() {
    return this.localContext != null;
  }

  public void setLocalContextIsSet(boolean value) {
    if (!value) {
      this.localContext = null;
    }
  }

  public boolean isNeedChecksum() {
    return this.needChecksum;
  }

  public Header setNeedChecksum(boolean needChecksum) {
    this.needChecksum = needChecksum;
    setNeedChecksumIsSet(true);
    return this;
  }

  public void unsetNeedChecksum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEEDCHECKSUM_ISSET_ID);
  }

  /** Returns true if field needChecksum is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedChecksum() {
    return EncodingUtils.testBit(__isset_bitfield, __NEEDCHECKSUM_ISSET_ID);
  }

  public void setNeedChecksumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEEDCHECKSUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MESSAGE_TYPE:
      if (value == null) {
        unsetMessageType();
      } else {
        setMessageType((MessageType)value);
      }
      break;

    case COMPRESS_TYPE:
      if (value == null) {
        unsetCompressType();
      } else {
        setCompressType((CompressType)value);
      }
      break;

    case REQUEST_INFO:
      if (value == null) {
        unsetRequestInfo();
      } else {
        setRequestInfo((RequestInfo)value);
      }
      break;

    case RESPONSE_INFO:
      if (value == null) {
        unsetResponseInfo();
      } else {
        setResponseInfo((ResponseInfo)value);
      }
      break;

    case TRACE_INFO:
      if (value == null) {
        unsetTraceInfo();
      } else {
        setTraceInfo((TraceInfo)value);
      }
      break;

    case GLOBAL_CONTEXT:
      if (value == null) {
        unsetGlobalContext();
      } else {
        setGlobalContext((Map<String,String>)value);
      }
      break;

    case LOCAL_CONTEXT:
      if (value == null) {
        unsetLocalContext();
      } else {
        setLocalContext((Map<String,String>)value);
      }
      break;

    case NEED_CHECKSUM:
      if (value == null) {
        unsetNeedChecksum();
      } else {
        setNeedChecksum((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MESSAGE_TYPE:
      return getMessageType();

    case COMPRESS_TYPE:
      return getCompressType();

    case REQUEST_INFO:
      return getRequestInfo();

    case RESPONSE_INFO:
      return getResponseInfo();

    case TRACE_INFO:
      return getTraceInfo();

    case GLOBAL_CONTEXT:
      return getGlobalContext();

    case LOCAL_CONTEXT:
      return getLocalContext();

    case NEED_CHECKSUM:
      return isNeedChecksum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MESSAGE_TYPE:
      return isSetMessageType();
    case COMPRESS_TYPE:
      return isSetCompressType();
    case REQUEST_INFO:
      return isSetRequestInfo();
    case RESPONSE_INFO:
      return isSetResponseInfo();
    case TRACE_INFO:
      return isSetTraceInfo();
    case GLOBAL_CONTEXT:
      return isSetGlobalContext();
    case LOCAL_CONTEXT:
      return isSetLocalContext();
    case NEED_CHECKSUM:
      return isSetNeedChecksum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Header)
      return this.equals((Header)that);
    return false;
  }

  public boolean equals(Header that) {
    if (that == null)
      return false;

    boolean this_present_messageType = true && this.isSetMessageType();
    boolean that_present_messageType = true && that.isSetMessageType();
    if (this_present_messageType || that_present_messageType) {
      if (!(this_present_messageType && that_present_messageType))
        return false;
      if (!this.messageType.equals(that.messageType))
        return false;
    }

    boolean this_present_compressType = true && this.isSetCompressType();
    boolean that_present_compressType = true && that.isSetCompressType();
    if (this_present_compressType || that_present_compressType) {
      if (!(this_present_compressType && that_present_compressType))
        return false;
      if (!this.compressType.equals(that.compressType))
        return false;
    }

    boolean this_present_requestInfo = true && this.isSetRequestInfo();
    boolean that_present_requestInfo = true && that.isSetRequestInfo();
    if (this_present_requestInfo || that_present_requestInfo) {
      if (!(this_present_requestInfo && that_present_requestInfo))
        return false;
      if (!this.requestInfo.equals(that.requestInfo))
        return false;
    }

    boolean this_present_responseInfo = true && this.isSetResponseInfo();
    boolean that_present_responseInfo = true && that.isSetResponseInfo();
    if (this_present_responseInfo || that_present_responseInfo) {
      if (!(this_present_responseInfo && that_present_responseInfo))
        return false;
      if (!this.responseInfo.equals(that.responseInfo))
        return false;
    }

    boolean this_present_traceInfo = true && this.isSetTraceInfo();
    boolean that_present_traceInfo = true && that.isSetTraceInfo();
    if (this_present_traceInfo || that_present_traceInfo) {
      if (!(this_present_traceInfo && that_present_traceInfo))
        return false;
      if (!this.traceInfo.equals(that.traceInfo))
        return false;
    }

    boolean this_present_globalContext = true && this.isSetGlobalContext();
    boolean that_present_globalContext = true && that.isSetGlobalContext();
    if (this_present_globalContext || that_present_globalContext) {
      if (!(this_present_globalContext && that_present_globalContext))
        return false;
      if (!this.globalContext.equals(that.globalContext))
        return false;
    }

    boolean this_present_localContext = true && this.isSetLocalContext();
    boolean that_present_localContext = true && that.isSetLocalContext();
    if (this_present_localContext || that_present_localContext) {
      if (!(this_present_localContext && that_present_localContext))
        return false;
      if (!this.localContext.equals(that.localContext))
        return false;
    }

    boolean this_present_needChecksum = true && this.isSetNeedChecksum();
    boolean that_present_needChecksum = true && that.isSetNeedChecksum();
    if (this_present_needChecksum || that_present_needChecksum) {
      if (!(this_present_needChecksum && that_present_needChecksum))
        return false;
      if (this.needChecksum != that.needChecksum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_messageType = true && (isSetMessageType());
    list.add(present_messageType);
    if (present_messageType)
      list.add(messageType.getValue());

    boolean present_compressType = true && (isSetCompressType());
    list.add(present_compressType);
    if (present_compressType)
      list.add(compressType.getValue());

    boolean present_requestInfo = true && (isSetRequestInfo());
    list.add(present_requestInfo);
    if (present_requestInfo)
      list.add(requestInfo);

    boolean present_responseInfo = true && (isSetResponseInfo());
    list.add(present_responseInfo);
    if (present_responseInfo)
      list.add(responseInfo);

    boolean present_traceInfo = true && (isSetTraceInfo());
    list.add(present_traceInfo);
    if (present_traceInfo)
      list.add(traceInfo);

    boolean present_globalContext = true && (isSetGlobalContext());
    list.add(present_globalContext);
    if (present_globalContext)
      list.add(globalContext);

    boolean present_localContext = true && (isSetLocalContext());
    list.add(present_localContext);
    if (present_localContext)
      list.add(localContext);

    boolean present_needChecksum = true && (isSetNeedChecksum());
    list.add(present_needChecksum);
    if (present_needChecksum)
      list.add(needChecksum);

    return list.hashCode();
  }

  @Override
  public int compareTo(Header other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMessageType()).compareTo(other.isSetMessageType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageType, other.messageType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompressType()).compareTo(other.isSetCompressType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompressType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compressType, other.compressType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestInfo()).compareTo(other.isSetRequestInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestInfo, other.requestInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseInfo()).compareTo(other.isSetResponseInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseInfo, other.responseInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceInfo()).compareTo(other.isSetTraceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceInfo, other.traceInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGlobalContext()).compareTo(other.isSetGlobalContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlobalContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.globalContext, other.globalContext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalContext()).compareTo(other.isSetLocalContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localContext, other.localContext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedChecksum()).compareTo(other.isSetNeedChecksum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedChecksum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needChecksum, other.needChecksum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Header(");
    boolean first = true;

    if (isSetMessageType()) {
      sb.append("messageType:");
      if (this.messageType == null) {
        sb.append("null");
      } else {
        sb.append(this.messageType);
      }
      first = false;
    }
    if (isSetCompressType()) {
      if (!first) sb.append(", ");
      sb.append("compressType:");
      if (this.compressType == null) {
        sb.append("null");
      } else {
        sb.append(this.compressType);
      }
      first = false;
    }
    if (isSetRequestInfo()) {
      if (!first) sb.append(", ");
      sb.append("requestInfo:");
      if (this.requestInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.requestInfo);
      }
      first = false;
    }
    if (isSetResponseInfo()) {
      if (!first) sb.append(", ");
      sb.append("responseInfo:");
      if (this.responseInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.responseInfo);
      }
      first = false;
    }
    if (isSetTraceInfo()) {
      if (!first) sb.append(", ");
      sb.append("traceInfo:");
      if (this.traceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.traceInfo);
      }
      first = false;
    }
    if (isSetGlobalContext()) {
      if (!first) sb.append(", ");
      sb.append("globalContext:");
      if (this.globalContext == null) {
        sb.append("null");
      } else {
        sb.append(this.globalContext);
      }
      first = false;
    }
    if (isSetLocalContext()) {
      if (!first) sb.append(", ");
      sb.append("localContext:");
      if (this.localContext == null) {
        sb.append("null");
      } else {
        sb.append(this.localContext);
      }
      first = false;
    }
    if (isSetNeedChecksum()) {
      if (!first) sb.append(", ");
      sb.append("needChecksum:");
      sb.append(this.needChecksum);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
    if (requestInfo != null) {
      requestInfo.validate();
    }
    if (responseInfo != null) {
      responseInfo.validate();
    }
    if (traceInfo != null) {
      traceInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HeaderStandardSchemeFactory implements SchemeFactory {
    public HeaderStandardScheme getScheme() {
      return new HeaderStandardScheme();
    }
  }

  private static class HeaderStandardScheme extends StandardScheme<Header> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Header struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MESSAGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.messageType = com.dianping.pigeon.remoting.common.domain.generic.thrift.MessageType.findByValue(iprot.readI32());
              struct.setMessageTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPRESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compressType = CompressType.findByValue(iprot.readI32());
              struct.setCompressTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.requestInfo = new RequestInfo();
              struct.requestInfo.read(iprot);
              struct.setRequestInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESPONSE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.responseInfo = new ResponseInfo();
              struct.responseInfo.read(iprot);
              struct.setResponseInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRACE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.traceInfo = new TraceInfo();
              struct.traceInfo.read(iprot);
              struct.setTraceInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GLOBAL_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.globalContext = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.globalContext.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setGlobalContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOCAL_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.localContext = new HashMap<String,String>(2*_map4.size);
                String _key5;
                String _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readString();
                  _val6 = iprot.readString();
                  struct.localContext.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setLocalContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NEED_CHECKSUM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.needChecksum = iprot.readBool();
              struct.setNeedChecksumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Header struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.messageType != null) {
        if (struct.isSetMessageType()) {
          oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.messageType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.compressType != null) {
        if (struct.isSetCompressType()) {
          oprot.writeFieldBegin(COMPRESS_TYPE_FIELD_DESC);
          oprot.writeI32(struct.compressType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.requestInfo != null) {
        if (struct.isSetRequestInfo()) {
          oprot.writeFieldBegin(REQUEST_INFO_FIELD_DESC);
          struct.requestInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.responseInfo != null) {
        if (struct.isSetResponseInfo()) {
          oprot.writeFieldBegin(RESPONSE_INFO_FIELD_DESC);
          struct.responseInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.traceInfo != null) {
        if (struct.isSetTraceInfo()) {
          oprot.writeFieldBegin(TRACE_INFO_FIELD_DESC);
          struct.traceInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.globalContext != null) {
        if (struct.isSetGlobalContext()) {
          oprot.writeFieldBegin(GLOBAL_CONTEXT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.globalContext.size()));
            for (Map.Entry<String, String> _iter8 : struct.globalContext.entrySet())
            {
              oprot.writeString(_iter8.getKey());
              oprot.writeString(_iter8.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.localContext != null) {
        if (struct.isSetLocalContext()) {
          oprot.writeFieldBegin(LOCAL_CONTEXT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.localContext.size()));
            for (Map.Entry<String, String> _iter9 : struct.localContext.entrySet())
            {
              oprot.writeString(_iter9.getKey());
              oprot.writeString(_iter9.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNeedChecksum()) {
        oprot.writeFieldBegin(NEED_CHECKSUM_FIELD_DESC);
        oprot.writeBool(struct.needChecksum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HeaderTupleSchemeFactory implements SchemeFactory {
    public HeaderTupleScheme getScheme() {
      return new HeaderTupleScheme();
    }
  }

  private static class HeaderTupleScheme extends TupleScheme<Header> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Header struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMessageType()) {
        optionals.set(0);
      }
      if (struct.isSetCompressType()) {
        optionals.set(1);
      }
      if (struct.isSetRequestInfo()) {
        optionals.set(2);
      }
      if (struct.isSetResponseInfo()) {
        optionals.set(3);
      }
      if (struct.isSetTraceInfo()) {
        optionals.set(4);
      }
      if (struct.isSetGlobalContext()) {
        optionals.set(5);
      }
      if (struct.isSetLocalContext()) {
        optionals.set(6);
      }
      if (struct.isSetNeedChecksum()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetMessageType()) {
        oprot.writeI32(struct.messageType.getValue());
      }
      if (struct.isSetCompressType()) {
        oprot.writeI32(struct.compressType.getValue());
      }
      if (struct.isSetRequestInfo()) {
        struct.requestInfo.write(oprot);
      }
      if (struct.isSetResponseInfo()) {
        struct.responseInfo.write(oprot);
      }
      if (struct.isSetTraceInfo()) {
        struct.traceInfo.write(oprot);
      }
      if (struct.isSetGlobalContext()) {
        {
          oprot.writeI32(struct.globalContext.size());
          for (Map.Entry<String, String> _iter10 : struct.globalContext.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            oprot.writeString(_iter10.getValue());
          }
        }
      }
      if (struct.isSetLocalContext()) {
        {
          oprot.writeI32(struct.localContext.size());
          for (Map.Entry<String, String> _iter11 : struct.localContext.entrySet())
          {
            oprot.writeString(_iter11.getKey());
            oprot.writeString(_iter11.getValue());
          }
        }
      }
      if (struct.isSetNeedChecksum()) {
        oprot.writeBool(struct.needChecksum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Header struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.messageType = com.dianping.pigeon.remoting.common.domain.generic.thrift.MessageType.findByValue(iprot.readI32());
        struct.setMessageTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.compressType = CompressType.findByValue(iprot.readI32());
        struct.setCompressTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.requestInfo = new RequestInfo();
        struct.requestInfo.read(iprot);
        struct.setRequestInfoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.responseInfo = new ResponseInfo();
        struct.responseInfo.read(iprot);
        struct.setResponseInfoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.traceInfo = new TraceInfo();
        struct.traceInfo.read(iprot);
        struct.setTraceInfoIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map12 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.globalContext = new HashMap<String,String>(2*_map12.size);
          String _key13;
          String _val14;
          for (int _i15 = 0; _i15 < _map12.size; ++_i15)
          {
            _key13 = iprot.readString();
            _val14 = iprot.readString();
            struct.globalContext.put(_key13, _val14);
          }
        }
        struct.setGlobalContextIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.localContext = new HashMap<String,String>(2*_map16.size);
          String _key17;
          String _val18;
          for (int _i19 = 0; _i19 < _map16.size; ++_i19)
          {
            _key17 = iprot.readString();
            _val18 = iprot.readString();
            struct.localContext.put(_key17, _val18);
          }
        }
        struct.setLocalContextIsSet(true);
      }
      if (incoming.get(7)) {
        struct.needChecksum = iprot.readBool();
        struct.setNeedChecksumIsSet(true);
      }
    }
  }

}

